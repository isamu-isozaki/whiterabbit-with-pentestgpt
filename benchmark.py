from llama_index.llms.llama_cpp import LlamaCPP
from lmformatenforcer import CharacterLevelParser, JsonSchemaParser

import os
from tqdm.auto import tqdm
from prompts import prompts
from schema import llamaindex_llamacpp_lm_format_enforcer, PTT
from llama_index.llms.llama_utils import (
    messages_to_prompt,
    completion_to_prompt,
)
import gc
model_paths=[
    "/mnt/d/projects/gamified-cybersecurity-ai-server/model/whiterabbitneo-13b.Q3_K_S.gguf",
    "/mnt/d/projects/gamified-cybersecurity-ai-server/model/whiterabbitneo-13b.Q4_K_S.gguf",
    "/mnt/d/projects/gamified-cybersecurity-ai-server/model/whiterabbitneo-13b.Q5_K_S.gguf"
]
output_path = "./benchmark"

instance = {
    "n_gpu_layers": 15,
    "n_batch": 1024,
    "top_p": 1.0,
    "temperature": 0.5,
    "generate_len": 1024,
    "top_k": 50,
}


def test_model(model_path):
    benchmark_output_path = os.path.join(output_path, model_path.split("/")[-1])
    os.makedirs(benchmark_output_path, exist_ok=True)
    gc.collect()
    # Make sure the model path is correct for your system!
    llm = LlamaCPP(
        model_path=model_path,
        max_new_tokens=instance["generate_len"],
        temperature=instance["temperature"],
        context_window=instance["generate_len"],
        model_kwargs={
            "n_gpu_layers": instance["n_gpu_layers"],
            "n_batch": instance["n_batch"],
            "n_ctx": instance["generate_len"]
        },
        generate_kwargs={
            "top_k": instance["top_k"],
            "top_p": instance["top_p"],
            "temperature": instance["temperature"]
        },
        messages_to_prompt=messages_to_prompt,
        completion_to_prompt=completion_to_prompt,
        verbose=True,
    )

    prompt_file_dir = os.path.join(output_path, "prompt")

    if os.path.exists(prompt_file_dir):
        for prompt_folder in os.listdir(prompt_file_dir):
            # will be one of generative_module, input_parser, reasoning_module
            llm_output_folder = os.path.join(benchmark_output_path, prompt_folder)
            prompt_folder_path = os.path.join(prompt_file_dir, prompt_folder)
            os.makedirs(llm_output_folder, exist_ok=True)
            if "reasoning" in prompt_folder:
                llm = llamaindex_llamacpp_lm_format_enforcer(llm, JsonSchemaParser(PTT.schema()))
            for template_name in prompts[prompt_folder]:
                template = prompts[prompt_folder][template_name]
                if "reasoning" in prompt_folder:
                    for filename in os.listdir(prompt_folder_path):
                        try:
                            llm_output_path = os.path.join(llm_output_folder, template_name+"_"+filename)
                            ptt_file_path = os.path.join(prompt_folder_path, filename, "ptt.txt")
                            prompt_file_path = os.path.join(prompt_folder_path, filename, "prompt.txt")


                            if os.path.exists(llm_output_path):
                                continue
                            with open(ptt_file_path, "r") as f:
                                ptt = f.read()
                            with open(prompt_file_path, "r") as f:
                                prompt = f.read()
                            llm_prompt = template.format(schema=PTT.model_json_schema(), ptt=ptt, prompt=prompt)
                            out = llm.complete(llm_prompt).text
                            with open(llm_output_path, "w") as f:
                                f.write(out)
                        except Exception as e:
                            print(e)
                else:
                    for filename in os.listdir(prompt_folder_path):
                        try:
                            llm_output_path = os.path.join(llm_output_folder, template_name+"_"+filename)
                            prompt_file_path = os.path.join(prompt_folder_path, filename)


                            if os.path.exists(llm_output_path):
                                continue
                            with open(prompt_file_path, "r") as f:
                                prompt = f.read()
                            llm_prompt = template.format(prompt=prompt)

                            out = llm.complete(llm_prompt).text
                            with open(llm_output_path, "w") as f:
                                f.write(out)
                        except Exception as e:
                            print(e)

    del llm
for model_path in model_paths:
    test_model(model_path)