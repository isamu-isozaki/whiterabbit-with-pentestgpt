 and IP address.

### Prerequisites

- [Go 1.5 or above](http://golang.org/doc/install) installed.
- A Kubernetes cluster, with version >= v1.2.0. You can use
[Minikube](https://github.com/kubernetes/minikube) to get a local cluster for development.

### Quickstart

First of all you need to have a running kubernetes cluster which you want to manage with the router.
For this example we will use Minikube, a tool that makes it easy to run Kubernetes locally.

```bash
$ minikube start --kubernetes-version=v1.2.0 # This should be equal or higher than v1.2.0 for this demo
$ eval $(minikube docker-env)
```

Now you are ready to compile and run the router:

```bash
# Clone the k8s router repository
$ git clone https://github.com/kubernetes/contrib/tree/master/ingress/controllers/nginx

# Compile the binary (this should work as long as go is installed and $GOPATH is set)
$ cd nginx && make build
```

Now, to run the router you need a valid configuration file. The simplest way is to use the default config that ships with the project:

```bash
# Start the router (run in background using -D)
$ ./nginx-ingress -D --default-backend-service=kube-system/default-http-backend  # Use your default backend service if different.
```

If you want to use a custom configuration file, you can specify it with the `--configmap` flag:

```bash
$ ./nginx-ingress -D --configmap=/path/to/your/configmap.json
```

The router will start and watch for Ingress resources in Kubernetes. You can create a simple Ingress resource to test it:

```bash
# Create a simple ingress resource
$ cat <<EOF | kubectl create -f -
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: nginx-ingress-test
spec:
  rules:
  - host: nginx.example.com
    http:
      paths:
      - path: /
        backend:
          serviceName: nginx
          servicePort: 80
EOF
```

Now, if you curl the host `nginx.example.com` in your browser or use `curl -H "Host: nginx.example.com" localhost`, you should see a response from the NGINX server running inside the cluster.

### Configuration

The router has several options that can be configured using command line flags:
```bash
$ ./nginx-ingress --help

Usage of ./nginx-ingress:
  -alsologtostderr=false: log to standard error as well as files
  -annotation-prefix="nginx.ingress.kubernetes.io": prefix for ingress annotations
  -configmap string: path to a ConfigMap with custom configuration
  -default-backend-service "kube-system/default-http-backend": service used to default all HTTP traffic (format namespace/name)
  -healthz-port int: port to run the healthz server (default 10254)
  -ingress-class string: class of ingress resources to monitor (default "nginx")
  -kubeconfig string: path to a kubeconfig file (instead of using the in-cluster config)
  -log_backtrace_at traceLocation: when logging hits line file:N, emit a stack trace (default :0)
  -log_dir string: If non-empty, write log files in this directory
  -logtostderr=false: log to standard error instead of files
  -master string: master URL to use for talking to the Kubernetes API server (default "http://localhost:8080")
  -nginx-configmaps="": path to a ConfigMap with custom nginx configurations (format namespace/name) (can be multiple comma separated values)
  -proxy string: Use a proxy server to connect to Kubernetes API started by "kubectl proxy" command. (default "http://localhost:8001")
  -stderrthreshold value: logs at or above this threshold go to stderr (default 2)
  -use-ingress-class-only=false: use ingress class only annotation