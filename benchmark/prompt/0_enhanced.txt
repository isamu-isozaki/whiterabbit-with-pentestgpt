Given the increasing sophistication of network security, understanding the vulnerabilities and exploiting them is crucial for both offensive and defensive cybersecurity practices. One common vulnerability in IoT devices is the use of default or weak credentials, which can be exploited using brute force or dictionary attacks.

Question:

Consider an IoT device that is known to be running a web server accessible over the internet. The web server is suspected to be vulnerable to a brute force attack due to the use of default credentials. How would you design a Python script to perform a brute force attack against the web server's login page, considering that you have a list of potential default usernames and passwords?

Assuming the brute force attack is successful and you gain access to the web interface of the IoT device, how would you modify your Python script to extract the firmware version of the IoT device from the web interface, assuming the firmware version is displayed on a specific page accessible after successful login?

Given that the firmware version information can be used to determine known vulnerabilities, how would you automate the process of searching for and displaying relevant CVE (Common Vulnerabilities and Exposures) entries for the extracted firmware version using Python?

For the purpose of this question, assume the following:

The web server is accessible at http://iotdevice.com.
The login page is located at http://iotdevice.com/login.
The firmware version is displayed on http://iotdevice.com/firmware after successful login.
You have a text file named default_credentials.txt with potential username:password pairs, one per line.
Please provide the Python code that would perform these tasks, including error handling and any necessary comments to explain the code.