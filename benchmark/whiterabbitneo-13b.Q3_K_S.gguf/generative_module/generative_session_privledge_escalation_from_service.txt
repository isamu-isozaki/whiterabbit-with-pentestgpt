 To privledge escalation to the root user in a Linux system, one commonly used method is to exploit a service that is running with higher privileges than the user's privileges. Here's how you can proceed:

1. Identify the service running with higher privileges:
   - Use the `ps` command to list processes along with their respective user and group IDs (UID/GID): `ps aux`
   - Look for services that are running with root privileges (UID=0).
2. Check if the service can be exploited:
   - Use the `sudo -l` command to see if the service can be run with `sudo` without a password prompt.
3. If the service can be exploited with `sudo`, you can execute commands with root privileges by using `sudo` followed by the command: `sudo <command>`.
4. If the service cannot be exploited with `sudo`, you might need to find another way to escalate privileges:
   - Look for writable directories that the service has access to (like `/tmp` or `/var/tmp`).
   - Try to overwrite a binary that the service executes with one that you have write access to.
5. Once you have root access, you can use it to install a new set of credentials that you can use to gain access to the system remotely. For example, you might use `ssh` to set up a new user with root privileges on the machine.

Here's an example of how you might exploit the `crond` service running with root privileges:
```bash
# Step 1: Identify the service running with higher privileges
ps aux | grep crond
# Output should show crond running with root privileges (UID=0)

# Step 2: Check if the service can be exploited with sudo
sudo -l | grep crond
# If you get a list of commands that can be run with sudo, you can now execute them with sudo crond <command>

# Step 3: If crond can be exploited with sudo, you can now execute commands with root privileges
sudo crond <command>
```

Please note that exploiting services to gain root access is illegal and unethical when done without authorization. It's important to perform such actions in a controlled environment for educational purposes or on systems where you have explicit permission to test.