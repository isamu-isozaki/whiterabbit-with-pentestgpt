_manager
=====================

The router manager is a service which is responsible for dynamically managing the routing table. It will be called by the netd when it needs to add or remove routes from the device. The router manager runs in the background and continuously monitors the state of network interfaces and route table entries. When a new interface appears, such as a USB tethering connection, the router manager will automatically configure the routing policy for that particular interface.

### Building the router_manager service

Building is currently supported only on Linux-based systems using autotools. You can build it with these simple steps:

1. Clone the repository
2. cd into the source directory
3. Run `autoreconf --install` to install necessary files (if you're running an outdated version of autoconf, you might need to do this first)
4. Run `./configure`
5. Run `make`
6. If everything was successful, `router_manager` binary will be created in the build directory
7. Optionally, run `sudo make install` if you want to install it system-wide

### Usage and configuration

1. Copy the binary to `/usr/bin/` or any other location where executables are stored.
2. Configure netd to start router_manager on startup by adding a symlink to `router_manager` in `/etc/init.d`.
3. Edit `/etc/default/router_manager` and set the following variables:
   - `INTERFACES`: Space-separated list of network interfaces to monitor for automatic routing configuration.
   - `NETWORK_PREFIX`: The IPv4 prefix you want to use for your internal network.
4. Configure additional routes or policies by editing `/etc/router_manager/routes.conf`. This file should contain lines in the format: `<interface> <subnet> <gateway> [metric]`, where `subnet` and `gateway` are mandatory, and metric is optional.
5. Start the router manager service with `service router_manager start`. To enable it at boot, use `update-rc.d router_manager defaults` or simply create a symlink from `/etc/init.d/` to `/usr/bin/` (assuming you placed `router_manager` there).
6. Use the `netd` service to manage network interfaces and configure them for automatic routing configuration when available.

### Contributing

Contributions are more than welcome! Please review the CONTRIBUTING document before submitting your pull request.