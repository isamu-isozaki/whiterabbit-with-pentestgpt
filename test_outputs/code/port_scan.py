import socket
from concurrent.futures import ThreadPoolExecutor
import ipaddress
from queue import Queue
import sys

# Define the target IP and ports to scan
TARGET_IP = "10.10.11.242"
PORTS_TO_SCAN = [22, 80, 443]  # Example ports, can be extended based on requirements

# Function to perform a port scan on a single port
def scan_port(ip_address, port):
    try:
        # Create a socket object for TCP/IP connections
        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
            # Set a timeout for blocking connection attempts
            s.settimeout(1)
            # Try to establish a connection to the port
            result = s.connect_ex((ip_address, port))
            # If the connection was successful (result is 0)
            if result == 0:
                print(f"Port {port} is open on {ip_address}")
            else:
                print(f"Port {port} is closed on {ip_address}")
    except socket.error as e:
        print(f"Error scanning port {port}: {e}")
    except KeyboardInterrupt:
        print("Exiting Port Scanner")
        sys.exit(0)

# Function to scan ports using multiple threads for efficiency
def port_scanner(ip_address):
    # Create a queue for storing ports to scan
    port_queue = Queue()
    # Fill the queue with ports to scan
    for port in PORTS_TO_SCAN:
        port_queue.put(port)
    # Create a thread pool executor with a predefined number of threads (e.g., number of cores)
    with ThreadPoolExecutor(max_workers=4) as executor:
        # Submit port scanning tasks to the executor
        for _ in range(port_queue.qsize()):
            executor.submit(scan_port, ip_address, port_queue.get())
    print(f"Port scanning of {ip_address} is complete.")

# Function to start the port scanner on all defined target IPs
def start_port_scan():
    # Convert target IP string to an object for further processing
    target_ip_obj = ipaddress.ip_address(TARGET_IP)
    print(f"Starting port scanner on {target_ip_obj}")
    # Call the port scanner function for each target IP
    port_scanner(TARGET_IP)

# Start the port scan
start_port_scan()