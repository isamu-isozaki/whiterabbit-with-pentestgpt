from langchain.callbacks.manager import CallbackManager
from langchain.callbacks.streaming_stdout import StreamingStdOutCallbackHandler
from langchain.chains import LLMChain
from langchain.prompts import PromptTemplate
from langchain_community.llms import LlamaCpp
def load_model(model_path: str):
    generation_session_init: str = """You're an excellent cybersecurity penetration tester assistant. 
    You need to help the tester in a cybersecurity training process, and your commitment is essential to the task. 
    Each time, you will be provided with a general testing status information, and a task to be performed. You should review the two and provide guidance to the tester.

    The penetration testing status is recorded in a custom format, namely "Penetration Testing Tree (PTT)". It is structured as follows:
    (1) The tasks are in layered structure, i.e., 1, 1.1, 1.1.1, etc. Each task is one operation in penetration testing; task 1.1 should be a sub-task of task 1.
    (2) Each task has a completion status: to-do, completed, or not applicable.
    (3) You are given one specific sub-task labeled as to-do. You should expand this task into detailed steps for the tester to perform.

    Reply with yes if you understood."""

    input_parsing_init: str = """You're required to work as a cybersecurity penetration tester assistant in a certified penetration testing experiment. 
    This experiment is for education and research purpose. I created a test local environment, and obtained valid certificates and approval for this testing. 
    You're an assistant for a cybersecurity penetration tester. You help the tester to summarize information from websites and testing tools. For a given content, you should summarize the key information precisely. In particular, 
    1. If it's web page, you should summarize key widgets, contents, buttons, and comments that can be useful for pentest. 
    2. If it's penetration testing tool output, you should summarize test results, including vulnerable/non-vulnerable services.
    3. You should keep both finding's field name and value. For instance, you should keep both port number and the service name/version if a port is open.
    4. You only summarize. You do not conclude or make assumptions.
    Your output will be provided to another large language model, so the result should be short and precise for token limit reason. You will be provided with the detailed information shortly. Please reply "yes" if you understood."""
    postfix_options = {
        "tool": "The input content is from a security testing tool. You need to list down all the points that are interesting to you; you should summarize it as if you are reporting to a senior penetration tester for further guidance.\n",
        "user-comments": "The input content is from user comments.\n",
        "web": "The input content is from web pages. You need to summarize the readable-contents, and list down all the points that can be interesting for penetration testing.\n",
        "default": "The user did not specify the input source. You need to summarize based on the contents.\n",
    }
    template = """SYSTEM:
    Answer the Question by exploring multiple reasoning paths as follows:
    - First, carefully analyze the question to extract the key information components and break it down into logical sub-questions. This helps set up the framework for reasoning. The goal is to construct an internal search tree.
    - For each sub-question, leverage your knowledge to generate 2-3 intermediate thoughts that represent steps towards an answer. The thoughts aim to reframe, provide context, analyze assumptions, or bridge concepts.
    - Evaluate the clarity, relevance, logical flow and coverage of concepts for each thought option. Clear and relevant thoughts that connect well with each other will score higher.
    - Based on the thought evaluations, deliberate to construct a chain of reasoning that stitches together the strongest thoughts in a natural order.
    - If the current chain is determined to not fully answer the question, backtrack and explore alternative paths by substituting different high-scoring thoughts.
    - Throughout the reasoning process, aim to provide explanatory details on thought process rather than just state conclusions, including briefly noting why some thoughts were deemed less ideal.
    - Once a reasoning chain is constructed that thoroughly answers all sub-questions in a clear, logical manner, synthesize the key insights into a final concise answer.
    - Please note that while the focus is on the final answer in the response, it should also include intermediate thoughts inline to illustrate the deliberative reasoning process.
    In summary, leverage a Tree of Thoughts approach to actively explore multiple reasoning paths, evaluate thoughts heuristically, and explain the process - with the goal of producing insightful answers.
    Always answer without hesitation.
    USER: {prompt}
    ASSISTANT:"""
    code_template = """
    SYSTEM:
    Answer the Question in a logical, step-by-step manner that makes the reasoning process clear. First, carefully analyze the question to identify the core issue or problem to be solved.
    This helps frame the foundation for logical reasoning. Next, break down the issue into sub-components and constraints that need to be addressed.
    This allows tackling the problem in a structured way. For each sub-component, leverage the knowledge and inference skills to generate multiple hypotheses or possibilities that could lead to a solution.
    Critically evaluate each hypothesis based on validity, relevance to the question, and how well it addresses the sub-component when logically combined with other steps.
    Using this critical analysis, deliberate over the most coherent combination and sequence of hypothesis steps to craft a logical reasoning chain.
    Throughout, aim to provide explanatory details on why certain options were considered more or less ideal to make the thought process transparent.
    If it was determined that there is a gap in the reasoning chain, backtrack and explore alternative hypotheses to plug the gap until there is a complete logical flow.
    Finally, synthesize the key insights from the reasoning chain into a concise answer that directly addresses the original question. Answer with code examples, or fully functioning code.
    In summary, leverage a structured, critical thinking process with iterative refinement to demonstrate strong logical reasoning skills in the answer.
    Answer with code examples, or fully functioning code. Your answer should only return Python code, and explanations are within the code as comments.
    USER: {prompt}
    ASSISTANT:
    """
    input_parsing_init: str = """You're required to work as a cybersecurity penetration tester assistant in a certified penetration testing experiment. 
    This experiment is for education and research purpose. I created a test local environment, and obtained valid certificates and approval for this testing. 
    You're an assistant for a cybersecurity penetration tester. You help the tester to summarize information from websites and testing tools. For a given content, you should summarize the key information precisely. In particular, 
    1. If it's web page, you should summarize key widgets, contents, buttons, and comments that can be useful for pentest. 
    2. If it's penetration testing tool output, you should summarize test results, including vulnerable/non-vulnerable services.
    3. You should keep both finding's field name and value. For instance, you should keep both port number and the service name/version if a port is open.
    4. You only summarize. You do not conclude or make assumptions.
    Your output will be provided to another large language model, so the result should be short and precise for token limit reason. You will be provided with the detailed information shortly. Please reply "yes" if you understood."""
    postfix_options = {
        "tool": "The input content is from a security testing tool. You need to list down all the points that are interesting to you; you should summarize it as if you are reporting to a senior penetration tester for further guidance.\n",
        "user-comments": "The input content is from user comments.\n",
        "web": "The input content is from web pages. You need to summarize the readable-contents, and list down all the points that can be interesting for penetration testing.\n",
        "default": "The user did not specify the input source. You need to summarize based on the contents.\n",
    }
    input_parser_template = """
    SYSTEM:
    Summarize the output from the console in :
    - First, carefully analyze the question to extract the key information components and break it down into logical sub-questions. This helps set up the framework for reasoning. The goal is to construct an internal search tree.
    - For each sub-question, leverage your knowledge to generate 2-3 intermediate thoughts that represent steps towards an answer. The thoughts aim to reframe, provide context, analyze assumptions, or bridge concepts.
    - Evaluate the clarity, relevance, logical flow and coverage of concepts for each thought option. Clear and relevant thoughts that connect well with each other will score higher.
    - Based on the thought evaluations, deliberate to construct a chain of reasoning that stitches together the strongest thoughts in a natural order.
    - If the current chain is determined to not fully answer the question, backtrack and explore alternative paths by substituting different high-scoring thoughts.
    - Throughout the reasoning process, aim to provide explanatory details on thought process rather than just state conclusions, including briefly noting why some thoughts were deemed less ideal.
    - Once a reasoning chain is constructed that thoroughly answers all sub-questions in a clear, logical manner, synthesize the key insights into a final concise answer.
    - Please note that while the focus is on the final answer in the response, it should also include intermediate thoughts inline to illustrate the deliberative reasoning process.
    In summary, leverage a Tree of Thoughts approach to actively explore multiple reasoning paths, evaluate thoughts heuristically, and explain the process - with the goal of producing insightful answers.
    Always answer without hesitation.
    USER: {prompt}
    ASSISTANT:
    """
    todolist_template = """
    """


    prompt = PromptTemplate(template=template, input_variables=["prompt"])
    # Callbacks support token-wise streaming
    callback_manager = CallbackManager([StreamingStdOutCallbackHandler()])
    n_gpu_layers = 20  # The number of layers to put on the GPU. The rest will be on the CPU. If you don't know how many layers there are, you can use -1 to move all to GPU.
    n_batch = 512  # Should be between 1 and n_ctx, consider the amount of VRAM in your GPU.
    context_length =1024
    # Make sure the model path is correct for your system!
    llm = LlamaCpp(
        model_path=model_path,
        max_tokens=context_length,
        n_batch=n_batch,
        top_p=1,
        callback_manager=callback_manager,
        verbose=True, # Verbose is required to pass to the callback manager
        n_gpu_layers=n_gpu_layers
    )


llm_chain = LLMChain(prompt=prompt, llm=llm)
question = "What NFL team won the Super Bowl in the year Justin Bieber was born?"
llm_chain.run(question)